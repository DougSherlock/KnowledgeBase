Fluid Framework Notes
Doug Sherlock
Sun 2020-12-20 6:00 PM
Fluid Framework Notes

-Fluid components do not require server-side code.  [BUT WHY IS THERE A "FLUID SERVICE"?]
-FF is open-source
-FF is JavaScript

-Distributed Data Structures are the primary building block Of the fluid framework. (Examples - SharedMap, ShareString.)

-Fluid components are collections of distributed data structures and business logic

-PrimedComponent Is a base class for your fluid components

-this.root is a member of every PrimedComponent. It is a map of attributes you can add which are automatically shared with other users when your edit your Fluid component.

-all changes to root are saved automatically.

DDSs have several lifecycle methods:
- initializingFirstTime
- hasInitialized

-add DDS event handlers to define when UI should update.

DESIGN BEST PRACTICES
1. Keep the server simple.
2. Move logic to the client.

FLUID CLIENT has two main parts:
1. Fluid Loader - defines app logic and contains data.
2. Fluid Container - loads containers by connecting to the Fluid Service to fetch containers.

FLUID SERVICE
- Does ALMOST NOTHING.
- Receives OPERATIONS from a client.
- Propagates OPERATIONS to all clients in sequential order.
- DOES NOT PARSE OPS - simply passes them along.

STEPS TO CREATE A FLUID APP
1. Write the view.
2. Define the interface our model will expose.
3. Write the model using the Fluid Framework.
4. Include our model in our container.
5. Connect our container to the service for collaboration.
6. Connect our model instance to our view for rendering.

The Fluid Framework provides a class called DataObject which we can extend to build our model. 

THE FLUID SERVICE

The Fluid Framework contains a service component.  A reference implementation of a Fluid service called Routerlicious is included in the FluidFramework repo. 

Fluid services like Routerlicious have three responsibilities:
1. Ordering: They assign monotonically increasing sequence numbers to incoming operations.
2. Broadcast: They then broadcast the operations to all connected clients, including their sequence numbers.
3. Storage: Theyâ€™re also responsible for storing Fluid data in the form of summary operations
